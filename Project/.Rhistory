g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
means <- cumsum(sample(0 : 1, n , replace = TRUE)) / (1  : n)
g <- ggplot(data.frame(x = 1 : n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0.5) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
n <- 1000000; means <- cumsum(rnorm(n)) / (1  : n); library(ggplot2)
g <- ggplot(data.frame(x = 1 : n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
library(UsingR)
data(father.son)
x <- father.son$sheight
View(father.son)
?qnorm
qnorm(0.975)
qnorm(0.95)
length(x)
mean(x)
sd(x)
(mean(x)+c(-1,1)*qnorm(0.975)*sd(x)/sqrt(length(x)))/12
View(father.son)
y <- father.son$fheight
(mean(y)+c(-1,1)*qnorm(0.95)*sd(y)/sqrt(length(y)))/12
mean(y)
sd(y)
y <- father.son$fheight
(mean(y)+qnorm(c(0.025,0.975))*sd(y)/sqrt(length(y))
)
qnorm(c(0.025,0.975))
sd(y)/sqrt(length(y)))
sd(y)/sqrt(length(y)
)
(0 + qnorm(c(0.025,0.975)*0.1))
qnorm(c(0.025,0.975)
(0 + qnorm(c(0.025,0.975))*0.1)
)
qnorm(c(0.025,0.975))
qnorm(c(0.025,0.975))*0.1)
round(1 / sqrt(10 ^ (1 : 6)), 3)
n <- 20;
pvals <- seq(.1, .9, by = .05);
pvals
nosim <- 1000
?sapply
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
lapply(x, mean)
lapply(x, quantile, probs = 1:3/4)
sapply(x, quantile)
phats <- rbinom(nosim, prob = p, size = n) / n
coverage <- sapply(pvals, function(p){
phats <- rbinom(nosim, prob = p, size = n) / n
?rbinom
?rbinom()
)
?rbinom
y <- rbinom(noism,prob = 1/2, size =n )
y <- rbinom(nosim,prob = 1/2, size =n )
y
y <- rbinom(nosim,prob = 1/2, size =n )/n
n
y
coverage <- sapply(pvals, function(p){
phats <- rbinom(nosim, prob = p, size = n) / n
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
coverage(0.5)
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage)) + geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(.75, 1.0)
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.0/library")
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage)) + geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(.75, 1.0)
?par
par(mfrow=c(3,1))
n <- 20;
pvals <- seq(.1, .9, by = .05);
nosim <- 1000
coverage <- sapply(pvals, function(p){
phats <- rbinom(nosim, prob = p, size = n) / n
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage)) + geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(.75, 1.0)
n <- 100; pvals <- seq(.1, .9, by = .05); nosim <- 1000
coverage2 <- sapply(pvals, function(p){
phats <- rbinom(nosim, prob = p, size = n) / n
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage2)) +
geom_line(size = 2) + geom_hline(yintercept = 0.95)+ ylim(.75, 1.0)
phats <- (rbinom(nosim, prob = 1/2, size = n) + 2) / (n + 4)
phats
phats1 <- (rbinom(nosim, prob = 1/2, size = n) ) / (n)
phats1
n <- 20;
pvals <- seq(.1, .9, by = .05);
nosim <- 1000
coverage <- sapply(pvals, function(p){
phats <- (rbinom(nosim, prob = p, size = n)+2) / (n+4)
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage2)) +
geom_line(size = 2) + geom_hline(yintercept = 0.95)+ ylim(.75, 1.0)
n <- 20;
pvals <- seq(.1, .9, by = .05);
nosim <- 1000
coverage <- sapply(pvals, function(p){
phats <- (rbinom(nosim, prob = p, size = n)+2) / (n+4)
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage2)) +
geom_line(size = 2) + geom_hline(yintercept = 0.95)+ ylim(.75, 1.0)
ggplot(data.frame(pvals, coverage), aes(x = pvals, y = coverage)) +
geom_line(size = 2) + geom_hline(yintercept = 0.95)+ ylim(.75, 1.0)
?round
x <- 5; t <- 94.32; lambda <- x / t
round(lambda + c(-1, 1) * qnorm(.975) * sqrt(lambda / t), 3)
?poisson.test
poisson.test(x, T = 94.32)$conf
x<- 600; t <- 60; lambda <- x/t
round(lambda+ c(-1, 1) * qnorm(.975) * sqrt(lambda / t), 3 )
poisson.test(600, T = 60)
lambdavals <- seq(0.005, 0.10, by = .01); nosim <- 1000
t <- 100
coverage <- sapply(lambdavals, function(lambda){
lhats <- rpois(nosim, lambda = lambda * t) / t
ll <- lhats - qnorm(.975) * sqrt(lhats / t)
ul <- lhats + qnorm(.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
ggplot(data.frame(lambdavals, coverage), aes(x = lambdavals, y = coverage)) +
geom_line(size = 2) + geom_hline(yintercept = 0.95)+ylim(0, 1.0)
?rpois
coverage <- sapply(lambdavals, function(lambda){
lhats <- rpois(nosim, lambda = lambda * t) / t
ll <- lhats - qnorm(.975) * sqrt(lhats / t)
ul <- lhats + qnorm(.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
ggplot(data.frame(lambdavals, coverage), aes(x = lambdavals, y = coverage))
+ geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(0, 1.0)
lambdavals <- seq(0.005, 0.10, by = .01); nosim <- 1000
t <- 1000
coverage <- sapply(lambdavals, function(lambda){
lhats <- rpois(nosim, lambda = lambda * t) / t
ll <- lhats - qnorm(.975) * sqrt(lhats / t)
ul <- lhats + qnorm(.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
ggplot(data.frame(lambdavals, coverage), aes(x = lambdavals, y = coverage))
+ geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(0, 1.0)
lambdavals <- seq(0.005, 0.10, by = .01); nosim <- 1000
t <- 1000
coverage <- sapply(lambdavals, function(lambda){
lhats <- rpois(nosim, lambda = lambda * t) / t
ll <- lhats - qnorm(.975) * sqrt(lhats / t)
ul <- lhats + qnorm(.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
ggplot(data.frame(lambdavals, coverage), aes(x = lambdavals, y = coverage)) +
geom_line(size = 2) + geom_hline(yintercept = 0.95) + ylim(0, 1.0)
?pnorm
qnorm(0.7, mean = 80, sd = 10, lower.tail=FALSE)
pnorm(70, mean = 80, sd = 10, lower.tail=FALSE)
pnorm(70, mean = 80, sd = 10, lower.tail=TRUE)
qnorm(0.95, mean = 1100, sd = 75, lower.tail= FALSE)
qnorm(0.95, mean = 1100, sd = 75, lower.tail= TRUE)
?sqrt
sqrt(100)
#that sample mean?
qnorm(0.95, mean = 1100, sd = 75/sqrt(100), lower.tail= TRUE)
choose(5,4)*0.5^5 + choose(5,5)*0.5^5
?ppois
?pnorm
pnorm(16, mean = 15, sd=10/sqrt(100))
1-pnorm(16, mean = 15, sd=10/sqrt(100))
1-2*(1-pnorm(16, mean = 15, sd=10/sqrt(100)))
(1/12)/sqrt(1000)
ppois(10, lambda = 5*3)
data(sleep)
sleep
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
data(sleep)
sleep
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "Yellow", alpha = .5)
g
?qt
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
```
```{r, echo=TRUE,eval=FALSE}
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference)
s <- sd(difference)
n <- 10
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
?t.test
k <- 1000
xvals <- seq(-5, 5, length = k)
xvals
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
?dnmro
?dnorm
dnorm(1)
dnrom(-5)
dnorm(-5)
dnorm(1.96)
dnorm(2, mena = 0, sd = 1)
dnorm(2, mean = 0, sd = 1)
dnorm(10, mean = 0, sd = 1)
manipulate(myplot(mu)
mu = slider(1, 20, step = 1))
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
?manipulate
library("manipulate", lib.loc="C:/Program Files/R/R-3.1.0/library")
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.0/library")
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
mu = slider(1, 20, step = 1))
mu = slider(1, 20, step = 1)
mu
manupulate(myplot(1))
manipulate(myplot(1))
manipulate(myplot(2))
manipulate(myplot(3))
manipulate(myplot(4))
manipulate(myplot(5))
manipulate(myplot(6))
manipulate(myplot(10))
manipulate(myplot(20))
manipulate(myplot(100))
k <- 100
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
manipulate(myplot(10))
k <- 10
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
pvals <- seq(.5, .99, by = .01)
myplot2 <- function(df){
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),
p = pvals)
g <- ggplot(d, aes(x= n, y = t))
g <- g + geom_abline(size = 2, col = "lightblue")
g <- g + geom_line(size = 2, col = "black")
g <- g + geom_vline(xintercept = qnorm(0.975))
g <- g + geom_hline(yintercept = qt(0.975, df))
g
}
manipulate(myplot2(df), df = slider(1, 20, step = 1))
manipulate(myplot2(2))
pvals <- seq(.5, .99, by = .01)
myplot2 <- function(df){
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),
p = pvals)
g <- ggplot(d, aes(x= n, y = t))
g <- g + geom_abline(size = 2, col = "lightblue")
g <- g + geom_line(size = 2, col = "red")
g <- g + geom_vline(xintercept = qnorm(0.975))
g <- g + geom_hline(yintercept = qt(0.975, df))
g
}
manipulate(myplot2(2))
pvals <- seq(.5, .99, by = .01)
myplot2 <- function(df){
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),
p = pvals)
g <- ggplot(d, aes(x= n, y = t))
g <- g + geom_abline(size = 2, col = "lightgray")
g <- g + geom_line(size = 2, col = "red")
g <- g + geom_vline(xintercept = qnorm(0.975))
g <- g + geom_hline(yintercept = qt(0.975, df))
g
}
manipulate(myplot2(2))
pvals <- seq(.5, .99, by = .01)
myplot2 <- function(df){
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),
p = pvals)
g <- ggplot(d, aes(x= n, y = t))
g <- g + geom_abline(size = 2, col = "lightblut")
g <- g + geom_line(size = 2, col = "red")
g <- g + geom_vline(xintercept = qnorm(0.975))
g <- g + geom_hline(yintercept = qt(0.975, df))
g
}
manipulate(myplot2(2))
pvals <- seq(.5, .99, by = .01)
myplot2 <- function(df){
d <- data.frame(n= qnorm(pvals),t=qt(pvals, df),
p = pvals)
g <- ggplot(d, aes(x= n, y = t))
g <- g + geom_abline(size = 2, col = "lightblue")
g <- g + geom_line(size = 2, col = "red")
g <- g + geom_vline(xintercept = qnorm(0.975))
g <- g + geom_hline(yintercept = qt(0.975, df))
g
}
manipulate(myplot2(2))
manipulate(myplot2(20))
manipulate(myplot2(200))
###
data(sleep)
head(sleep)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(g1)^2 + (n2-1) * sd(g2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
library(datasets); data(ChickWeight); library(reshape2)
ChickWeight
View(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
?dcast
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
wideCW
library(dplyr)
install.packages("dplyr")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
?mutate
View(wideCW)
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g
g <- g + facet_grid(. ~ Diet)
g
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.0/library")
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
g
g <- g + geom_violin(col = "black", size = 2)
g
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
wideCW14
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
wideCW12 <- subset(wideCW, Diet %in% c(1,2))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
wideCW12
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
wideCW23 <- subset(wideCW, Diet %in% c(2,3))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW23)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW23)$conf
)
?pbinom
?ppois
### T test in R
library(UsingR); data(father.son)
t.test(father.son$sheight - father.son$fheight)
mean(father.son$sheight - father.son$fheight)
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
View(wideCW)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
t.test(gain ~ Diet, paired = FALSE,
var.equal = TRUE, data = wideCW14)
wideCW23 <- subset(wideCW, Diet %in% c(2, 3))
t.test(gain ~ Diet, paired = FALSE,
var.equal = TRUE, data = wideCW23)
pt(2.5, 15, lower.tail = FALSE)
choose(8, 7) * .5 ^ 8 + choose(8, 8) * .5 ^ 8
pbinom(6, size = 8, prob = .5, lower.tail = FALSE)
ppois(9, 5, lower.tail = FALSE)
# Load packages
require(knitr)
require(markdown)
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("StatisticInference_PA_Part2.Rmd")
setwd("D:/JOHNS HOPKINS Data Science Program/Statistical Inference/Project")
# Load packages
require(knitr)
require(markdown)
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("StatisticInference_PA_Part2.Rmd")
markdownToHTML('StatisticInference_PA_Part2.md', 'StatisticInference_PA_Part2.html', options=c("use_xhml"))
system("pandoc -s StatisticInference_PA_Part2.html -o StatisticInference_PA_Part2.pdf")
# Load packages
require(knitr)
require(markdown)
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("StatisticInference_PA_Part1.Rmd")
markdownToHTML('StatisticInference_PA_Part1.md', 'StatisticInference_PA_Part1.html', options=c("use_xhml"))
system("pandoc -s StatisticInference_PA_Part1.html -o StatisticInference_PA_Part1.pdf")
# Load packages
require(knitr)
require(markdown)
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("StatisticInference_PA_Part1.Rmd")
markdownToHTML('StatisticInference_PA_Part1.md', 'StatisticInference_PA_Part1.html', options=c("use_xhml"))
system("pandoc -s StatisticInference_PA_Part1.html -o StatisticInference_PA_Part1.pdf")
